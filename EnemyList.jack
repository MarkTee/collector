/** Collector - by Mark Thomas
 *  https://github.com/marktee
 *
 *  Implements a linked list (of Enemies).
 */
class EnemyList {
    field Enemy enemy;       // the current node's Enemy
    field EnemyList next;    // the next node in the list

    /** Constructs a new List of Enemies. */
    constructor EnemyList new() {
        let enemy = null;
        let next = null;
        return this;
    }

    /** Frees memory and destroys the object. */
    method void dispose() {
        // traverse the list to delete all nodes
        if (~(next = null)) {
            do next.dispose();
        }

        if (~(enemy = null)) {
            do enemy.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Creates a new enemy and adds it to the list. */
    method void newEnemy(int playerX, int playerY) {
        // traverse the list to the end
        if (~(next = null)) {
            do next.newEnemy(playerX, playerY);
            return;
        }

        // create a new enemy, and append an empty node to the end of the list
        let enemy = Enemy.new(playerX, playerY);
        let next = EnemyList.new();
        return;
    }

    /** Moves all enemies and checks whether any of them have collided with
     *  the player.
     *
     *  Returns true if any enemy has collided with the player.
     *  Otherwise, returns false.
     */
    method boolean moveEnemies(int playerX, int playerY) {
        var boolean collided; // whether any enemy has collided
        let collided = false;

        // traverse the list to the end
        if (~(next = null)) {
            let collided = next.moveEnemies(playerX, playerY);
            if (collided) { return true; }
        }

        // if we're at the last node (which should be empty)
        if (enemy = null) {
            return false;
        }

        // move the enemy and check if they've collided with the player
        let collided = enemy.move(playerX, playerY);
        return collided;
    }

}
