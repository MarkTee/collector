/** Collector - by Mark Thomas
 *  https://github.com/marktee
 * 
 *  The goal of the game is to collect as many of the items (hollow squares) as 
 *  possible.
 *
 *  The game ends when the player collides with any of the circular enemies.
 *
 *  The player's character can be controlled using the arrow keys.
 *
 *  This game was written to learn more about the Jack programming language, a
 *  custom language used in the Nand2Tetris course.
 *
 *  Learn more here: https://www.nand2tetris.org/
 */
class CollectorGame {
    // game objects
    field EnemyList enemyList;
    field Interface interface;
    field Item item;
    field Player player;

    field int score; // the player's current score
    
    /** Constructs a new Collector game. */
    constructor CollectorGame new() {
        // initialize the game's interface
        let interface = Interface.new();
        
        // initialize the player character, and set their score to 0
        let player = Player.new();
        let score = 0;

        // initialize the item
        let item = Item.new();
                
        // initialize the list of enemies (which is empty at start)
        let enemyList = EnemyList.new();

        return this;
    }
    
    /** Frees memory and destroys all objects used by CollectorGame. */
    method void disposeObjects() {
        do enemyList.dispose();
        do interface.dispose();
        do item.dispose();
        do player.dispose();
        return;
    }

    /** Frees memory and destroys all objects. */
    method void dispose() {
        do disposeObjects();
        do Memory.deAlloc(this);
        return;
    }

    /** Resets the game if the player chooses to play again after losing. */
    method void resetGame() {
        // dispose of old objects
        do disposeObjects();

        // reinitialize new objects
        let interface = Interface.new();
        do interface.draw();
        do interface.erasePlayArea();

        let player = Player.new();
        do player.draw(true);
        let score = 0;

        let item = Item.new();
        do item.newPosition();

        let enemyList = EnemyList.new();
        
        return;
    }
    
    /** Handles the player getting an item. Performs the following actions:
     *  - updates score
     *  - places the item somewhere else
     *  - spawns a new enemy
     */
    method void getItem(int playerX, int playerY) {
        // update scoreboard
        let score = score + 1;
        do interface.updateScore(score);

        // generate new item position
        do item.newPosition();
 
        // spawn a new enemy
        do enemyList.newEnemy(playerX, playerY);
        
        return;
    }

    /** Displays the Game Over screen and asks the user whether they'd like
     *  to play again, or if they'd like to quit.
     *
     *  Returns true if the user would like to quit, and false if they'd like
     *  to play again.
     */
    method boolean shouldQuit() {
        var char key; // the key that's currently being pressed by the user
        do interface.drawGameOver();

        while (true) {
            let key = Keyboard.keyPressed();
            if (key = 78) { return true; }
            if (key = 89) { return false; }
        }

        return false; // statement required by Jack compiler
    }
    
    /** Displays the splash screen. After the user presses a key, sets up
     *  and starts the game.
     */
    method void splashScreen() {
        var char key; // the key that's currently being pressed by the user
        var int seed; // seed for the random number generator
        let seed = 0;

        // show splash screen
        let key = 0;
        do interface.drawSplashScreen();

        // wait until the player presses a key to start the game
        while (key = 0) {
            let key = Keyboard.keyPressed();
            let seed = seed + 1;
        }    
        
        // seed random number generator
        do Random.setSeed(seed);
        
        // initialize game
        do interface.erasePlayArea();
        do interface.draw();
        do player.draw(true);
        do item.newPosition();
        return;
    }


    /** Starts the actual game. */
    method void run() {
        var char key; // the key that's currently being pressed by the user
        var int playerX, playerY; // player character's coordinates

        do splashScreen();
        
        // main game loop
        while (true) {
            let key = Keyboard.keyPressed();
            
            // handle movement
            if (key = 131) { do player.move(1); } // up arrow key
            if (key = 130) { do player.move(2); } // left arrow key
            if (key = 133) { do player.move(3); } // down arrow key
            if (key = 132) { do player.move(4); } // right arrow key  
            
            // get player's new position
            let playerX = player.getX();
            let playerY = player.getY();
            
            // handle player getting the item
            if ((playerX = item.getX()) & (playerY = item.getY())) {
                do getItem(playerX, playerY); 
            }
            
            if (score > 0) {
                // if the player collided with an enemy, ask them if they'd
                // like to quit, or if they'd like to play again
                if (enemyList.moveEnemies(playerX, playerY)) {
                    if (shouldQuit()) { return; } // quit the game
                    do resetGame();               // reset the game
                }
            }
            
            do item.draw();  // redraw the item in case an enemy moved over it

            do Sys.wait(50); // wait 50ms
        }
        return; // statement required by Jack compiler
    }

}
