/** Collector - by Mark Thomas
 *  https://github.com/marktee
 *
 *  Implements the user interface. This includes the score and the borders that
 *  surround the playing area.
 */
class Interface {
    field String scoreboardText;
    field String gameOverText;
    field String playAgainPrompt;

    /** Constructs a new Interface. */
    constructor Interface new() {
        let scoreboardText = "Score:";
        let gameOverText = "Game Over";
        let playAgainPrompt = "Play Again? Y/N";
        return this;
    }

    /** Frees memory and destroys the Interface object. */
    method void dispose() {
        do Memory.deAlloc(scoreboardText);
        do Memory.deAlloc(gameOverText);
        do Memory.deAlloc(playAgainPrompt);
        do Memory.deAlloc(this);
        return;
    }

    /** Draws the splash screen, which the player sees immediately upon
     *  starting the game.
     */
    method void drawSplashScreen() {
        // initialize text
        var String line1, line2, line3, line4, line5, line6, line7;
        let line1 = "Collector";
        let line2 = "by Mark Thomas";
        let line3 = "https://github.com/MarkTee/";
        let line4 = "Collect the hollow squares to earn points.";
        let line5 = "Avoid the circles; if you touch one, you lose!";
        let line6 = "Use the arrow keys to move.";
        let line7 = "Press any key to start.";

        // print lines
        do Screen.setColor(true);

        do Output.moveCursor(7, 28);
        do Output.printString(line1);

        do Output.moveCursor(8, 25);
        do Output.printString(line2);

        do Output.moveCursor(9, 19);
        do Output.printString(line3);

        do Output.moveCursor(11, 11);
        do Output.printString(line4);

        do Output.moveCursor(12, 9);
        do Output.printString(line5);

        do Output.moveCursor(14, 19);
        do Output.printString(line6);

        do Output.moveCursor(16, 21);
        do Output.printString(line7);

        // deallocate strings
        do Memory.deAlloc(line1);
        do Memory.deAlloc(line2);
        do Memory.deAlloc(line3);
        do Memory.deAlloc(line4);
        do Memory.deAlloc(line5);
        do Memory.deAlloc(line6);

        return;
    }

    /** Initializes and draws the scoreboard. */
    method void drawScoreboard() {
        // display scoreboard in the center of the screen
        do Output.moveCursor(0, 27);
        do Output.printString(scoreboardText);
        do updateScore(0); // initalize score to 0
        return;
    }

    /** Updates the scoreboard to the specified score. */
    method void updateScore(int score) {
        // pad the score with zeroes if necessary
        do Output.moveCursor(0, 34);
        if (score < 100) { do Output.printInt(0); }
        if (score < 10)  { do Output.printInt(0); }
        do Output.printInt(score);
        return;
    }

    /** Draws the border around the playing area.
     *  This gives a playing area of 506x242 pixels.
     */
    method void drawBorder() {
        do Screen.setColor(true);
        do Screen.drawRectangle(0, 12, 511, 12);    // top
        do Screen.drawRectangle(0, 12, 2, 255);     // left
        do Screen.drawRectangle(509, 13, 511, 255); // right
        do Screen.drawRectangle(0, 255, 511, 255);  // bottom
        return;
    }

    /** Erases all images in the play area. */
    method void erasePlayArea() {
        do Screen.setColor(false);
        do Screen.drawRectangle(3, 13, 508, 254);
        return;
    }

    /** Draws the Game Over screen. */
    method void drawGameOver() {
        do erasePlayArea();
        do Output.moveCursor(10, 27);
        do Output.printString(gameOverText);
        do Output.moveCursor(12, 24);
        do Output.printString(playAgainPrompt);
        return;
    }

    /** Draws the interface's components to the screen. This method should
     *  only be called at the beginning of a game.
     */
    method void draw() {
        var char key;
        do drawBorder();
        do drawScoreboard();
        return;
    }

}
